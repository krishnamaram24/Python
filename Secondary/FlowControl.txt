Flow Control
-------------
=>Flow control describes the order in which statements will be executed at runtime
=>There are 3 types of Control Flow statements
1.Conditional/Selection Statements
3.Transfer Statements
2.Iterative/Looping  statements


1.Conditional/Selection Statements
------------------------------------
1.if
Syntax:
if condition:
  statement-1
  statement-2
  statement-3
note: if condition is true then statements will be executed
ex:
name=input("please enter your name")
if name=="krish":
  print("my name is",name)

2.if-else
Syntax:
if condition:
  Action-1
else:
  Action-2
Note:
=>if condition is true then action-1 will be executed otherwise action-2 will be executed
=>here else part is optional
ex1:
name=input("please enter your name")
if name=="krish":
  print("my name is",name)
else:
  print("you didn't enter name as krish")


3.if-elif-else
Syntax:
if condition1:
  Action-1
elif condition2:
  Action-2
elif condition3:
  Action-3
else:
  Default Action
Note:Based on condition the corresponding Action will be executed
ex1:
name=input("please enter your name")
if name=="krish":
  print("my name is",name)
elif name=="tejesh":
  print("your friend",name)
elif name=="pradeep":
  print("your friend",name)
else:
  print("hey Python")



2.Iterative/Looping  statements
-----------------------------------
=>If you want to execute a group of statements multiple times then you should go for iterative statements
=>There are two types of iterative statements
1.for
2.while

1.for loop
------------
=>If you want to execute some action for every element present in some sequence(it may be string or collection) then you should go for  for lop
syntax:
for <eachelement> in <sequence>:
  do some action
ex1: to print characters present in the given string
s="krishna maram"
for c in s:
  print(c) 



2.while loop
----------------
=>If we want to execute a group of statements iteratively until some condition false, then you should go for while loop
syntax:
while condition:
  body
ex1: to print numbers from 1 to 10 by using while loop
name=""
pwd=""
while name!="krishna" and pwd!="maram":
  name=input("enter name")
  pwd=input("enter pwd")
print("done")


Infinite loops
------------------
i=0
while True:
  i=i+1
  print("Hello:",i)


Nested loops
--------------------
for i in range(4):
  for j in range(4):
    print("i={} and j={}".format(i,j))
Note: 4*4 =16 lines of code we can see





3.Transfer Statements
--------------------------
break
continue
pass

1.break
---------
=>You can use break statement inside loops to break loop execution based on some condition
ex1:
cart=[10,20,300,40,50]
for item in cart:
  if item > 250:
    print("sorry for this item, insurance is required")
    break
  print("processing item:",item)


2.continue
------------
=>You can use contnue  statement to skip current iteration and continue next iteration
for i in range(10):
  if i%2==0:
    continue
  print(i)

ex1:
cart=[10,20,300,40,50]
for item in cart:
  if item > 250:
    print("sorry for this item, insurance is required")
    continue
  print("processing item:",item)



Loops with else statement/block
----------------------------------
=>Inside loop execution,if break statement not executed,then only else part will be executed

1.for-else
2.while-else
3.try-except-else-finally 
ex1:
cart=[10,20,30,40,50]
for item in cart:
  if item > 250:
    print("sorry for this item, insurance is required")
    break
  print("processing item:",item)
else:
  print("congrats all items processed succesfully")

note: here else means loop without break


pass statement
-------------------
In our programming syntactically if block is required which won't do anything then you can define that empty block with pass keyword
=>it is an empty/null statement
=>it won't do anything
=>pass is a keyword in python
=>if empty block is required then go for pass statement

ex1:
for i in range(100):
  if i%10==0:
    print(i)
  else:
    pass




