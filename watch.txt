##########################################################################
#####     1.Script for creating CloudWatch alarm                       #####
##########################################################################
#!/usr/bin/env python
import boto3
import botocore
rebooted_instances = set({
    "SO5-Adobe101","SO5-Adobe102",
})
def is_instance_in_reboot_list(instance_name):
    return instance_name in rebooted_instances
def check_response(response):
    if not(response is None):
        status_code = response["ResponseMetadata"]["HTTPStatusCode"]
        if status_code == 200:
            return True
        else:
            return False
def get_instance_ids_names(ec2_client):
    instance_ids_names = []
    if not(ec2_client is None):
        response = ec2_client.describe_instances()
        if(check_response(response)):
            for reservation in response.get('Reservations',[{}]):
                for instance in reservation.get("Instances",{}):
		    for tag in instance.get("Tags"):
		        if tag['Key']=='Name':
			    instance_ids_names.append((instance.get("InstanceId",None), tag['Value']))
                    #instance_ids_names.append((instance.get("InstanceId",None),instance.get("Tags")[0]['Value']))
    return instance_ids_names
def get_instance_alarm_metrics(cloudwatch_client):
    instance_metrics = {}
    if not(cloudwatch_client is None):
        response = cloudwatch_client.describe_alarms()
        print("describe_alarms")
        print(response)
        if (check_response(response)):
            metric_alarms = response.get("MetricAlarms",[])
            for i in range(len(metric_alarms)):

                for dimension in metric_alarms[i]["Dimensions"]:
                    if dimension["Name"] == "InstanceId":
                        instance_id = dimension["Value"]
                if not(instance_id is None):
                    metric_name = metric_alarms[i]["MetricName"]
                    metrics = instance_metrics.get(instance_id,set())
                    metrics.add(metric_name)
                    instance_metrics[instance_id] = metrics
    return instance_metrics
def set_cpuutilization_alarm(cloudwatch_client,instance_id,instance_name):
    if not(cloudwatch_client is None):
        try:
            response = cloudwatch_client.put_metric_alarm(
                AlarmName = instance_name + ' CPU Monitor',
                AlarmDescription='Created through boto3 API',
                MetricName='CPUUtilization',
                ComparisonOperator='GreaterThanOrEqualToThreshold',
                Threshold=90,
                Namespace='AWS/EC2',
                ActionsEnabled=True,
                AlarmActions = ['arn:aws:sns:us-east-1:161241613206:SureOffice_Admins'],
                Period= 300,
                EvaluationPeriods=5,
                Statistic='Average',
                Dimensions=[
                    {
                        'Name': 'InstanceId',
                        'Value': instance_id
                    }
                ],
                DatapointsToAlarm = 5,
                TreatMissingData = 'missing',
                Unit = "Percent"
                )
            if check_response(response):
                print("CPUUtilization Alarm set for instance:\t",instance_name)
                return
        except botocore.exceptions.ClientError:
            print("put_metric_alarm: invalid arg")
    print("unable to set CPUUtilization Alarm for instance:\t",instance_name)
def set_statuscheck_alarm(cloudwatch_client,instance_id,instance_name):
    if not(cloudwatch_client is None):
        try:
            response = cloudwatch_client.put_metric_alarm(
                AlarmName = instance_name + ' Status Monitor',
                AlarmDescription='Created through boto3 API',
                MetricName='StatusCheckFailed',
                ComparisonOperator='GreaterThanOrEqualToThreshold',
                Threshold=1,
                Namespace='AWS/EC2',
                ActionsEnabled=True,
                AlarmActions = ['arn:aws:sns:us-east-1:161241613206:SureOffice_Admins'],
                Period= 300,
                EvaluationPeriods=2,
                Statistic='Maximum',
                Dimensions=[
                    {
                        'Name': 'InstanceId',
                        'Value': instance_id
                    }
                ],
                DatapointsToAlarm = 2,
                TreatMissingData = 'missing',
                Unit = "Count"
                )
            if check_response(response):
                print("StatusCheck Alarm set for instance:\t",instance_name)
                return
        except botocore.exceptions.ClientError:
            print("put_metric_alarm: invalid arg")
        print("unable to set StatusCheck Alarm for instance:\t",instance_name)
def set_memorycheck_alarm(cloudwatch_client,instance_id,instance_name):
    if not(cloudwatch_client is None):
        try:
            response = cloudwatch_client.put_metric_alarm(
                AlarmName = instance_name + ' RAM Monitor',
                AlarmDescription='Created through boto3 API',
                MetricName='Available-Memory',
                ComparisonOperator='LessThanOrEqualToThreshold',
                Threshold=10,
                Namespace='Windows/Default',
                ActionsEnabled=True,
                AlarmActions = ['arn:aws:sns:us-east-1:161241613206:SureOffice_Admins'],
                Period= 300,
                EvaluationPeriods=5,
                Statistic='Average',
                Dimensions=[
                    {
                        'Name': 'InstanceId',
                        'Value': instance_id
                    }
                ],
                DatapointsToAlarm = 5,
                TreatMissingData = 'missing',
                Unit = "Percent"
                )
            if check_response(response):
                print("Memory check Alarm set for instance:\t",instance_name)
                return
        except botocore.exceptions.ClientError:
            print("put_metric_alarm: invalid arg")
        print("unable to set MemoryCheck Alarm for instance:\t",instance_name)
def setAlarms(instance_ids_names,instance_alarm_metrics):
    for instance_id,instance_name in instance_ids_names:
        print("Trying to set metrics for{0}").format(instance_name)
        if(is_instance_in_reboot_list(instance_name)):
            ### if there are no alarms set on this instance
            if not (instance_id in instance_alarm_metrics):
                set_cpuutilization_alarm(cloudwatch_client,instance_id,instance_name)
                set_statuscheck_alarm(cloudwatch_client,instance_id,instance_name)
                set_memorycheck_alarm(cloudwatch_client,instance_id,instance_name)
            else:
                metrics_for_instance = instance_alarm_metrics[instance_id]
                ### if instance has only CPUUtilization Monitor set
                if not ("CPUUtilization" in metrics_for_instance):
                    set_cpuutilization_alarm(cloudwatch_client,instance_id,instance_name)
                ### if instance has only StatusCheckFailed Monitor set
                if not ("StatusCheckFailed" in metrics_for_instance):
                    set_statuscheck_alarm(cloudwatch_client,instance_id,instance_name)
                if not ("Available-Memory" in metrics_for_instance):
                    set_memorycheck_alarm(cloudwatch_client,instance_id,instance_name)

        else:
            continue
def attachIAMRole(instance_ids_names,ec2_client):
    for instance_id,instance_name in instance_ids_names:
        print("Trying to set metrics for{0}").format(instance_name)
        try:
            if(is_instance_in_reboot_list(instance_name)):
                response = ec2_client.associate_iam_instance_profile(
                        IamInstanceProfile={
                           'Arn': 'arn:aws:iam::161241613206:instance-profile/SystemManagerRole',
                           'Name': instance_name
                         },
                         InstanceId=instance_id
                       )

            else:
                continue

        except botocore.exceptions.ClientError:
                 print("put_metric_alarm: invalid arg")
        print("unable to set MemoryCheck Alarm for instance:\t",instance_name)
if __name__ == "__main__":

    print("start...")

    # creating ec2 client
    ec2_client = boto3.client('ec2')
    print(ec2_client)
    # retrieve instance ids and names
    instance_ids_names = get_instance_ids_names(ec2_client)
    print (instance_ids_names)
    attachIAMRole(instance_ids_names,ec2_client)
    # creating cloudwatch client
    cloudwatch_client = boto3.client('cloudwatch')
    instance_alarm_metrics = get_instance_alarm_metrics(cloudwatch_client)
    print ('\n\n')
    print (instance_alarm_metrics)

    setAlarms(instance_ids_names,instance_alarm_metrics)

    print("end")

in Simplified form to remember
#!/usr/bin/env python
import boto3
import botocore
rebooted_instances= set ({
"ARBO-SD001", "ARBO-SD002",
})
def is_instance_in_reboot_list(instance_name):
   return instance_name in rebooted_instances
def get_instance_ids_names(ec2_client):
    return instance_ids_names
def get_instance_alarm_metrics(cloudwatch_client):
   return instance_metrics
def set_statucheck_alarm(cloudwatch_client, instance_id, instance_name):
def set_cpucheck_alarm(cloudwatch_client, instance_id, instance_name):
def set_memorycheck_alarm(cloudwatch_client, instance_id, instance_name):
def attachIAMRole(instance_ids_names, ec2_client):
def setAlarms(instance_ids_names, instance_alarm_metrics):
if __name__ == " __main__":
   # createing ec2 client
     ec2_client = boto3.client('ec2')
    # creating cloudwatch client
     cloudwatch_client = boto3.client('cloudwatch')
# retrieve instance names
get_instance_ids_names(ec2_client)
get_instance_alarm_metrics(cloudwatch_client)
attachIAMRole(instance_ids_names, ec2_client)
setAlarms(instance_ids_names, instance_alarm_metrics)